name: Docker DinD Environment

on:
  workflow_call:
    inputs:
      docker_dind_image:
        required: false
        type: string
        default: "docker:28.3.3-dind"
      login_registry:
        required: false
        type: string
      registry_username:
        required: false
        type: string
      registry_password:
        required: false
        type: string
      script:
        required: false
        type: string
        default: ""
      registry:
        required: false
        type: string
        default: ""
      image:
        required: false
        type: string
        default: ""
      tags:
        required: false
        type: string
        default: "latest"
      auto_tagging:
        required: false
        type: string
        default: "true"
      context:
        required: false
        type: string
        default: "."
      file:
        required: false
        type: string
        default: "Dockerfile"
      build_args:
        required: false
        type: string
        default: ""
      labels:
        required: false
        type: string
        default: ""
      platforms:
        required: false
        type: string
        default: "linux/amd64"
      push:
        required: false
        type: string
        default: "true"
      load:
        required: false
        type: string
        default: "false"
      use_cache:
        required: false
        type: string
        default: "true"
      sbom:
        required: false
        type: string
        default: "false"
      provenance:
        required: false
        type: string
        default: "false"
      scan:
        required: false
        type: string
        default: "true"
      trivy_severity:
        required: false
        type: string
        default: "CRITICAL,HIGH"
      trivy_ignore_unfixed:
        required: false
        type: string
        default: "true"
      do_build:
        required: false
        type: string
        default: "true"
      runner:
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  docker-dind:
    runs-on: ${{ inputs.runner }}
    env:
      DOCKER_HOST: tcp://127.0.0.1:2375
    steps:
      - uses: actions/checkout@v4

      - name: Start docker:dind
        shell: bash
        env:
          DIND_IMAGE: ${{ inputs.docker_dind_image }}
        run: |
          set -euo pipefail
          docker rm -f dind 2>/dev/null || true
          docker run -d --privileged \
            -e DOCKER_TLS_CERTDIR= \
            -p 127.0.0.1:2375:2375 \
            --name dind "$DIND_IMAGE" \
            dockerd --host=tcp://0.0.0.0:2375 --host=unix:///var/run/docker.sock --storage-driver=overlay2
          echo "DOCKER_HOST=tcp://127.0.0.1:2375" >> "$GITHUB_ENV"
          echo "DOCKER_TLS_CERTDIR=" >> "$GITHUB_ENV"

      - name: Wait for Docker daemon
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            if docker version &>/dev/null; then
              docker info
              exit 0
            fi
            sleep 1
          done
          echo "Docker daemon did not become ready on 2375" >&2
          docker logs --tail 200 dind >&2 || true
          exit 1

      - name: Docker login (explicit)
        if: ${{ inputs.login_registry != '' && inputs.registry_username != '' && inputs.registry_password != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.login_registry }}
          username: ${{ inputs.registry_username }}
          password: ${{ inputs.registry_password }}

      - name: Docker login (GHCR default)
        if: ${{ inputs.login_registry == '' && inputs.do_build == 'true' && inputs.push == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Compose image references
        id: compose
        if: ${{ inputs.do_build == 'true' }}
        shell: bash
        env:
          REGISTRY: ${{ inputs.registry }}
          IMAGE: ${{ inputs.image }}
          TAGS_RAW: ${{ inputs.tags }}
          REPO: ${{ github.repository }}
          AUTO_TAGGING: ${{ inputs.auto_tagging }}
        run: |
          set -euo pipefail
          sanitize() { echo "$1" | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9._-' '-' | sed 's/^-*//; s/-*$//; s/--*/-/g'; }
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            # Use the release tag as the only Docker tag
            TAGS_RAW="${GITHUB_REF_NAME}"
          elif [[ "${AUTO_TAGGING}" == "true" ]]; then
            if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
              dest=$(sanitize "${GITHUB_BASE_REF:-}")
              src=$(sanitize "${GITHUB_HEAD_REF:-}")
              branch="${dest}"
            else
              branch=$(echo "${GITHUB_REF_NAME:-}" | cut -d'/' -f1)
              branch=$(sanitize "$branch")
            fi
            short_sha=$(echo "${GITHUB_SHA}" | cut -c1-7)
            build_tag="${branch}.build${GITHUB_RUN_NUMBER}"
            sha_tag="${branch}.${short_sha}"
            TAGS_RAW="latest,${build_tag},${sha_tag}"
          fi
          tags=$(echo "$TAGS_RAW" | tr ',' '\n' | sed '/^\s*$/d' | xargs -I{} echo {})
          repo_lc="$(echo "${REPO}" | tr '[:upper:]' '[:lower:]')"
          if [[ -n "$REGISTRY" && -n "$IMAGE" ]]; then
            base="$REGISTRY/$IMAGE"
          else
            base="ghcr.io/${repo_lc}"
          fi
          full_tags=""
          first_tag=""
          while IFS= read -r t; do
            if [[ "$t" == "/" ]]; then
              ref="$t"
            else
              ref="$base:$t"
            fi
            if [[ -z "$first_tag" ]]; then first_tag="$ref"; fi
            full_tags+="$ref\n"
          done <<< "$tags"
          full_tags=$(echo -e "$full_tags" | sed '/^\s*$/d')
          echo "full_tags<<EOF" >> "$GITHUB_OUTPUT"
          echo "$full_tags" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "first_tag=$first_tag" >> "$GITHUB_OUTPUT"

      - name: Build and push
        id: build
        if: ${{ inputs.do_build == 'true' && steps.compose.outputs.full_tags != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          push: ${{ inputs.push }}
          load: ${{ inputs.load }}
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.compose.outputs.full_tags }}
          labels: ${{ inputs.labels }}
          build-args: ${{ inputs.build_args }}
          provenance: ${{ inputs.provenance }}
          sbom: ${{ inputs.sbom }}
